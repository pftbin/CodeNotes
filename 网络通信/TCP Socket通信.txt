/**************Client**************/

#include <winsock2.h>
#include <stdio.h>
#include <stdlib.h>

#pragma comment(lib , "ws2_32.lib")

#define BUFSIZE 4096 /*缓冲区大小*/

int main_client(int argc , char *argv[])
{
    WSADATA wsd;
    SOCKET sClient;
    char Buffer[BUFSIZE];
    int ret;
    struct sockaddr_in server;
    unsigned short port;
    struct hostent *host = NULL;

    if (argc < 3) {
        printf("Usage:%s IP Port\n" , argv[0]);
        return -1;
    }


    /*加载Winsock DLL*/
    if (WSAStartup(MAKEWORD(2 , 2) , &wsd) != 0) {
        printf("Winsock    初始化失败!\n");
        return 1;
    }

    /*创建Socket*/
    sClient = socket(AF_INET , SOCK_STREAM , IPPROTO_TCP);
    if (sClient == INVALID_SOCKET) {
        printf("socket() 失败: %d\n" , WSAGetLastError());
        return 1;
    }
    /*指定服务器地址*/
    server.sin_family = AF_INET;
    port = atoi(argv[2]);
    server.sin_port = htons(port);
    server.sin_addr.s_addr = inet_addr(argv[1]);

    if (server.sin_addr.s_addr == INADDR_NONE) {
        host = gethostbyname(argv[1]);    //输入的地址可能是域名等
        if (host == NULL) {
            printf("无法解析服务端地址: %s\n" , argv[1]);
            return 1;
        }
        CopyMemory(&server.sin_addr ,
                    host->h_addr_list[0] ,
                    host->h_length);
    }
    /*与服务器建立连接*/
    if (connect(sClient , (struct sockaddr*)&server ,
                    sizeof(server)) == SOCKET_ERROR) {
        printf("connect() 失败: %d\n" , WSAGetLastError());
        return 1;
    }

    /*发送、接收消息*/

    for (;;) {
        //从标准输入读取要发送的数据
        //gets_s(Buffer,BUFSIZE);
        gets(Buffer);
        //向服务器发送消息
        ret = send(sClient , Buffer , strlen(Buffer) , 0);
        if (ret == 0) {
            break;
        }
        else if (ret == SOCKET_ERROR) {
            printf("send() 失败: %d\n" , WSAGetLastError());
            break;
        }
        printf("Send %d bytes\n" , ret);
        //接收从服务器来的消息
        ret = recv(sClient , Buffer , BUFSIZE , 0);
        if (ret == 0) {
            break;
        }
        else if (ret == SOCKET_ERROR) {
            printf("recv() 失败: %d\n" , WSAGetLastError());
            break;
        }
        Buffer[ret] = '\0';
        printf("Recv %d bytes:\n\t%s\n" , ret , Buffer);

    }
    //用完了，关闭socket句柄(文件描述符)
    closesocket(sClient);
    WSACleanup();    //清理
    return 0;
}






/**************Server**************/
#include <winsock2.h>
#include <stdio.h>
#include <stdlib.h>

#pragma comment(lib , "ws2_32.lib")


#define DEFAULT_BUFFER 4096 /*缓冲区大小*/


/*与客户机通信的线程函数*/
DWORD WINAPI ClientThread(LPVOID lpParam)
{
    SOCKET sock = (SOCKET)lpParam;
    char Buffer[DEFAULT_BUFFER];
    int ret , nLeft , idx;
    while (1) {
        /*接收来自客户机的消息*/
        ret = recv(sock , Buffer , DEFAULT_BUFFER , 0);
        if (ret == 0)
            break;
        else if (ret == SOCKET_ERROR) {
            printf("recv() 失败: %d\n" , WSAGetLastError());
            break;
        }
        Buffer[ret] = '\0';
        printf("Recv: %s\n" , Buffer);    //打印接收到的消息


        nLeft = ret;
        idx = 0;
        while (nLeft > 0) {
            /*向客户机发送回应消息*/
            ret = send(sock , &Buffer[idx] , nLeft , 0);
            if (ret == 0)
                break;
            else if (ret == SOCKET_ERROR) {
                printf("send() 失败: %d\n" , WSAGetLastError());
                break;
            }
            nLeft -= ret;
            idx += ret;
        }
    }
    return 0;
}

int main_server(int argc , char **argv)
{
    WSADATA        wsd;
    HANDLE        hThread;
    DWORD        dwThread;
    SOCKET        sListen , sClient;
    int            AddrSize;
    unsigned short port;
    struct sockaddr_in local , client;

    if (argc < 2) {
        printf("Usage:%s Port\n" , argv[0]);
        return -1;
    }

    /*加载Winsock DLL*/
    if (WSAStartup(MAKEWORD(2 , 2) , &wsd) != 0) {
        printf("WinSock 初始化失败!\n");
        return 1;
    }

    /*创建Socket*/
    sListen = socket(AF_INET , SOCK_STREAM , IPPROTO_IP);
    if (sListen == SOCKET_ERROR) {
        printf("socket() 失败: %d\n" , WSAGetLastError());
        return 1;
    }

    local.sin_family = AF_INET;
    local.sin_addr.s_addr = htonl(INADDR_ANY);
    port = atoi(argv[1]);    //获取端口值
    local.sin_port = htons(port);

    /*绑定Socket*/
    if (bind(sListen ,
        (struct sockaddr*)&local ,
        sizeof(local)) == SOCKET_ERROR) {
        printf("bind() 失败: %d\n" , WSAGetLastError());
        return 1;
    }
    /*打开监听*/
    listen(sListen , 8);

    /*在端口进行监听，一旦有客户机发起连接请示
    就建立与客户机进行通信的线程*/
    while (1) {
        AddrSize = sizeof(client);
        /*监听是否有连接请求*/
        sClient = accept(sListen ,
                         (struct sockaddr*)&client ,
                         &AddrSize);
        if (sClient == INVALID_SOCKET) {
            printf("accept() 失败: %d\n" , WSAGetLastError());
            break;
        }
        printf("接受客户端连接: %s:%d\n" ,
               inet_ntoa(client.sin_addr) ,
               ntohs(client.sin_port));

        //创建一个线程去处理
        hThread = CreateThread(NULL , 0 , ClientThread ,
                               (LPVOID)sClient , 0 , &dwThread);

        if (hThread == NULL) {
            printf("CreateThread() 失败: %d\n" , GetLastError());
            break;
        }
        //处理完后关闭
        CloseHandle(hThread);
    }
    closesocket(sListen);
    WSACleanup();    //用完了要清理
    return 0;
}