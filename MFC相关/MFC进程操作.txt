1.停止指定名称进程
#include "tlhelp32.h"
BOOL StopProcess(CString strProcessName)  //_T("noepad++.exe")
{
	//创建进程快照(TH32CS_SNAPPROCESS表示创建所有进程的快照)  
	HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);  

	//PROCESSENTRY32进程快照的结构体  
	PROCESSENTRY32 pe;  

	//实例化后使用Process32First获取第一个快照的进程前必做的初始化操作  
	pe.dwSize = sizeof(PROCESSENTRY32);  


	//下面的IF效果同:  
	//if(hProcessSnap == INVALID_HANDLE_VALUE)   无效的句柄  
	if(!Process32First(hSnapShot,&pe))  
	{  
		return FALSE;  
	}  

	//将字符串转换为小写  
	strProcessName.MakeLower();  

	//如果句柄有效  则一直获取下一个句柄循环下去  
	while (Process32Next(hSnapShot,&pe))  
	{  

		//pe.szExeFile获取当前进程的可执行文件名称  
		CString scTmp = pe.szExeFile;  


		//将可执行文件名称所有英文字母修改为小写  
		scTmp.MakeLower();  

		//比较当前进程的可执行文件名称和传递进来的文件名称是否相同  
		//相同的话Compare返回0  
		if(!scTmp.Compare(strProcessName))  
		{  

			//从快照进程中获取该进程的PID(即任务管理器中的PID)  
			DWORD dwProcessID = pe.th32ProcessID;  
			HANDLE hProcess = ::OpenProcess(PROCESS_TERMINATE,FALSE,dwProcessID);  
			::TerminateProcess(hProcess,0);  
			CloseHandle(hProcess);  
			return TRUE;  
		}  
		scTmp.ReleaseBuffer();  
	}  
	strProcessName.ReleaseBuffer();  
	return FALSE;  
}


2.获取指定进程所对应的PID,如果启动了
#include <tlhelp32.h>
DWORD GetProcessHandle(LPCTSTR pName)
{
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hSnapshot) {
		return NULL;
	}
	PROCESSENTRY32 pe = { sizeof(pe) };
	BOOL fOk;
	for (fOk = Process32First(hSnapshot, &pe); fOk; fOk = Process32Next(hSnapshot, &pe)) {
		if (!_tcscmp(pe.szExeFile, pName)) {
			CloseHandle(hSnapshot);
			return pe.th32ProcessID;
		}
	}
	CloseHandle(hSnapshot);
	return NULL;
} 

3.打开指定程序

三个SDK函数（ WinExec、ShellExec、CrateProcess ）：
  
　　（一）WinExec  
　　这个函数最简单，只有两个参数，原型如下：  
　　UINT WinExec(  
　　LPCSTR lpCmdLine,   // 命令路径  
　　UINT uCmdShow      // 显示方式  
　　);  
　　使用方法如下：  
　　WinExec("Notepad.exe", SW_SHOW);  // 打开记事本 
	
	（二）ShellExecute  
　　原型如下：  
　　HINSTANCE ShellExecute(  
　　HWND hwnd,           //父窗口句柄  
　　LPCTSTR lpOperation,   //操作, 打开方式 "edit","explore","open","find","print","NULL"  
　　LPCTSTR lpFile,         //文件名,前面可加路径  
　　LPCTSTR lpParameters,   //参数  
　　LPCTSTR lpDirectory,    //默认文件夹  
　　INT nShowCmd          //显示方式  
　　);  
　　使用方法如下：  
　　ShellExecute(NULL,"open","C:\\Test.txt",NULL,NULL, SW_SHOWNORMAL); // 打开C:\Test.txt 文件  
　　ShellExecute(NULL, "open", "http://www.google.com/",  NULL, NULL, SW_SHOWNORMAL); // 打开网页www.google.com  
　　ShellExecute(NULL,"explore", "D:\\C++",NULL,NULL,SW_SHOWNORMAL); // 打开目录D:\C++  
　　ShellExecute(NULL,"print","C:\\Test.txt",NULL,NULL , SW_HIDE); // 打印文件C:\Test.txt  

	（三）CreateProcess  
　　原型如下：  
　　BOOL CreateProcess(  
　　LPCTSTR lpApplicationName, //执行程序名  
　　LPTSTR lpCommandLine,  // 参数行  
　　//下面两个参数描述了所创建的进程和线程的安全属性，如果为NULL则使用默认的安全属性  
　　LPSECURITY_ATTRIBUTES lpProcessAttributes,  // process security attributes  
　　LPSECURITY_ATTRIBUTES lpThreadAttributes,   // thread security attributes  
　　BOOL bInheritHandles,  // 继承标志  
　　DWORD dwCreationFlags, // 创建标志  
　　LPVOID lpEnvironment,  // 环境变量  
　　LPCTSTR lpCurrentDirectory,   // 运行该进程的初始目录  
　　LPSTARTUPINFO lpStartupInfo,  // 用于在创建子进程时设置各种属性  
　　LPPROCESS_INFORMATION lpProcessInformation //用于在进程创建后接受相关信息  
　　);  
　　使用方法如下：  
　　PROCESS_INFORMATION pi;  
　　STARTUPINFO si;  
　　memset(&si,0,sizeof(si));  
　　si.cb=sizeof(si);  
　　si.wShowWindow=SW_SHOW;  
　　si.dwFlags=STARTF_USESHOWWINDOW;  
　　bool fRet=CreateProcess("D:\\putty.exe",NULL,NULL,FALSE ,NULL,NULL,NULL,NULL,&si,&pi); 