1.CString 2 char*

	char pBuf[255] = {0};
	USES_CONVERSION;
	char* pTemp = T2A(strMsg);
	strcpy(pBuf,pTemp);
	
	16进制字符串转int：
	int Str2Int(CString strHexString,UINT uSysNum)
	{
		int nResult = 0;
		if (strHexString.GetLength() != 0)
		{
			char pBuf[MAX_PATH] = {0};
			USES_CONVERSION;
			strcpy_s(pBuf,T2A(strHexString));
			nResult = strtol(pBuf,NULL,uSysNum);
		}
		
		return nResult;
	}
	
2.char*   2 CString

	char* pBuffer = "Test";
	(1)
	USES_CONVERSION; 
	CString strData = A2T(pBuffer); 
	
	(2)
	CString strData;
	strData.Format(_T("%S"),pBuffer); //%S特指单字符
	
	(3)中文不乱码
//1.同为Unicode
static void Char2CString(const char* pBuffer, CString& pWideString)
{
	//计算char *数组大小，以字节为单位，一个汉字占两个字节
	int charLen = strlen(pBuffer);
	//计算多字节字符的大小，按字符计算。
	int len = MultiByteToWideChar(CP_ACP, 0, pBuffer, charLen, NULL, 0);
	//为宽字节字符数组申请空间，数组大小为按字节计算的多字节字符大小
	TCHAR* buf = new TCHAR[len + 1];
	//多字节编码转换成宽字节编码
	MultiByteToWideChar(CP_ACP, 0, pBuffer, charLen, buf, len);
	buf[len] = '\0'; //添加字符串结尾，注意不是len+1
	//将TCHAR数组转换为CString
	pWideString.Append(buf);
	//删除缓冲区
	delete[]buf;
}

//2.UTF-8与Unicode转换
static void UTF8ToUnicode(char* pUTF8Src, WCHAR** ppUnicodeDst)
{
	int nUnicodeLen;        //转换后Unicode的长度

	//获得转换后的长度，并分配内存
	nUnicodeLen = MultiByteToWideChar(CP_UTF8,
		0,
		pUTF8Src,
		-1,
		NULL,
		0);

	nUnicodeLen += 1;
	*ppUnicodeDst = new WCHAR[nUnicodeLen];

	//转为Unicode
	MultiByteToWideChar(CP_UTF8,
		0,
		pUTF8Src,
		-1,
		*ppUnicodeDst,
		nUnicodeLen);
}

static void UnicodeToUTF8(const WCHAR* pUnicodeSrc, char** ppUTF8Dst)
{
	/* get output buffer length */
	int		iUTF8Len(0);
	// wide char to multi char
	iUTF8Len = WideCharToMultiByte(CP_UTF8,
		0,
		pUnicodeSrc,
		-1,
		NULL,
		0,
		NULL,
		NULL);

	/* convert unicode to UTF8 */
	iUTF8Len += 1;
	*ppUTF8Dst = new char[iUTF8Len];
	memset(*ppUTF8Dst, 0, iUTF8Len);

	iUTF8Len = WideCharToMultiByte(CP_UTF8,
		0,
		pUnicodeSrc,
		-1,
		*ppUTF8Dst,
		iUTF8Len,
		NULL,
		NULL);
}
使用：
	char* pMsgBuffer(NULL);
	UnicodeToUTF8((LPCWSTR)strMsg, &pMsgBuffer);
	AUTODEL(pMsgBuffer, uniMsg);
	
使用：
	std::string sMsg;
	WCHAR* pUniMsg(NULL);
	UTF8ToUnicode((char*)sMsg.c_str(), &pUniMsg);
	AUTODEL(pUniMsg, uniMsg);
	if (pUniMsg)
	{
		strMsg = CString(pUniMsg);
	}

//////////////////////////////////////////////

	
	
	
3.CString 2  string

	CString strData = _T("Test");
	string  str = (CT2A)strData;
//or
	string  str = (CW2A)strData; //宽字符 to 单字符，正则表达式匹配使用string 

	
4.string  2  CString
std::string name = "li";
CString c_name;
c_name = name.c_str();//先创建对象，再使用=赋值

5.string  2 char*
string strA;
char* strB = strA.c_str();

6.char* 2 string
char* strA = "ABC";
string strB;
strB = strA;

7.TCHAR 转 CString
CString String;
TCHAR szString[256] = {0};
String = szString;

8.CString 转 TCHAR
CString theString( "Test" );
LPTSTR lpsz = new TCHAR[theString.GetLength()+1];
_tcscpy(lpsz, theString);

9.CString 转 WCHAR
CString strString = _T( "Test" );
WCHAR szString[256] = {0};
USES_CONVERSION;
wcscpy(szString, CT2CW(strString));

10.TCHAR* 和 char* 互转
char* TCHAR2char( const TCHAR* STR )
{
	int size = WideCharToMultiByte(CP_ACP, 0, STR, -1, NULL, 0, NULL, FALSE);
	char* str = new char[sizeof(char) * size];
	WideCharToMultiByte(CP_ACP, 0, STR, -1, str, size, NULL, FALSE);

	return str;
}
 
TCHAR* char2TCAHR( const char* str )
{
	int size = MultiByteToWideChar(CP_ACP, 0, str, -1, NULL, 0);
	TCHAR* retStr = new TCHAR[size * sizeof(TCHAR)];
	MultiByteToWideChar(CP_ACP, 0, str, -1, retStr, size);
	
	return retStr;
}

////////////////////////////////////////////////////////////////////////////////////////////
//Cstring 写入Buffer
BOOL WrtieStringToBuffer(BYTE* pBuffer, LPCTSTR lpszContent, DWORD dwContentMaxSize, BOOL bTransform)
{
	if (pBuffer==NULL)
		return FALSE;

	CString strItemContent = lpszContent;
	if (bTransform)//transform 0x
	{
		strItemContent.Replace(_T(" "),_T(""));
		strItemContent.Replace(_T("\t"), _T(""));
		strItemContent.Replace(_T("f"),_T("F"));
		strItemContent.Replace(_T("X"),_T("x"));

		int nEnd = strItemContent.Find(_T("0xFF,0xFF,0xFF,0xFF"));
		if (nEnd != -1)
			strItemContent = strItemContent.Left(nEnd);

		CString strNewItemContent;
		DWORD dwItemSize = CalcContentBinData(strItemContent,strNewItemContent);
		BYTE* pbyItemOutput = new BYTE[dwItemSize];
		memset(pbyItemOutput, 0xFF, dwItemSize);

		DWORD dwIndex = 0;
		strNewItemContent.Replace(_T("0X"),_T("0x"));
		while(strNewItemContent.Find(_T("0x")) != -1)
		{
			int nPos = strNewItemContent.Find(_T("0x"));
			if (nPos != -1)
			{
				CString strValue = strNewItemContent.Mid(nPos+2,2);
				BYTE byValue = (BYTE)Str2Int(strValue,16);
				pbyItemOutput[dwIndex++] = byValue;

				strNewItemContent = strNewItemContent.Mid(nPos+4);
			}
			
			if (nPos == -1)
				break;
		}

		if (dwIndex==dwItemSize)//Transform right
		{
			for (DWORD i = 0; i < dwItemSize; ++i)
			{
				if (i < dwContentMaxSize)
				{
					CHAR chItemValueSub = pbyItemOutput[i];
					pBuffer[i] = (BYTE)chItemValueSub;
				}
			}
		}
		delete[] pbyItemOutput;
	}
	else
	{
		DWORD dwItemSize = strItemContent.GetLength() * sizeof(TCHAR) + 2;
		BYTE* pbyItemOutput = new BYTE[dwItemSize];
		memset(pbyItemOutput, 0xFF, dwItemSize);

		pbyItemOutput[0] = (BYTE)dwItemSize;
		pbyItemOutput[1] = 0x03;
		memcpy(pbyItemOutput + 2, (BYTE*)strItemContent.GetBuffer(NULL), strItemContent.GetLength() * sizeof(TCHAR));

		for (DWORD i = 0; i < dwItemSize; ++i)
		{
			if (i < dwContentMaxSize)
			{
				CHAR chItemValueSub = pbyItemOutput[i];
				pBuffer[i] = (BYTE)chItemValueSub;
			}
		}
		delete[] pbyItemOutput;
	}

	return TRUE;
}
//////////////////////////////////////////////////////////////////////////
//字符串转数字
static int Str2Int(CString strHexString,UINT uSysNum)
{
	int nResult = 0;
	if (strHexString.GetLength() != 0)
	{
		char pBuf[MAX_PATH] = {0};
		USES_CONVERSION;
		strcpy_s(pBuf,T2A(strHexString));
		nResult = strtol(pBuf,NULL,uSysNum);
	}

	return nResult;
}

//////////////////////////////////////////////////////////////////////
//反向查找子串（参数类型限制ReverseFind只能查找单个字符）
int nPos = -1;
CString strResvContent = strContent;strResvContent.MakeReverse();
CString strResvEndText = strEndText;strResvEndText.MakeReverse();
int nResvPos = strResvContent.Find(strResvEndText);
if (nResvPos != -1)
{
	nPos = strContent.GetLength() - strEndText.GetLength() - nPos;
}

////////////////////////////////////////////////////////////////////////

//限制输入 PreTranslateMessage
	if(pMsg->wParam == VK_BACK || pMsg->wParam == VK_DELETE)
		{
			//do nothing
		}
		else if((pMsg->wParam >= 48 && pMsg->wParam <= 57)		//0-9
			 || (pMsg->wParam >= 65 && pMsg->wParam <= 70)		//A-F
			 || (pMsg->wParam >= 97 && pMsg->wParam <= 102))	//a-f 
		{
			//do nothing
		}


从RGB彩色空间转换到YCrCb彩色空间的每个像素存放位数未做压缩，变换公式如下： 
y=(0.299*r+0.587*g+0.114*b);
cr=r-y;
cb=b-y;

第二种为：
y=0.299*red+0.587*green+0.114*blue;              
cb=0.564*(blue-ycr[i][j].y);
cr=0.713*(red-ycr[i][j].y);

/////////////////////////////////////////////////////////////////////////
Unicode 与 UTF8 互转

char* pInfo(NULL);
UnicodeToUTF8((LPCWSTR)strMessage, &pInfo);
void UnicodeToUTF8(const WCHAR *pUnicodeSrc, char** ppUTF8Dst)
{
	/* get output buffer length */
	int		iUTF8Len(0);
	// wide char to multi char
	iUTF8Len = WideCharToMultiByte(CP_UTF8,
		0,
		pUnicodeSrc,
		-1,
		NULL,
		0,
		NULL,
		NULL );

	/* convert unicode to UTF8 */
	iUTF8Len += 1;
	*ppUTF8Dst = new char[iUTF8Len];
	memset(*ppUTF8Dst, 0, iUTF8Len);

	iUTF8Len = WideCharToMultiByte(CP_UTF8,
		0,
		pUnicodeSrc,
		-1,
		*ppUTF8Dst,
		iUTF8Len,
		NULL,
		NULL );

}

WCHAR *pUniTmp(NULL);
UTF8ToUnicode((char *)pBuff, &pUniTmp);//pBuff是BYTE*
void UTF8ToUnicode(char* pUTF8Src, WCHAR** ppUnicodeDst)
{

	int nUnicodeLen;        //转换后Unicode的长度

	//获得转换后的长度，并分配内存
	nUnicodeLen = MultiByteToWideChar(CP_UTF8,
		0,
		pUTF8Src,
		-1,
		NULL,
		0);

	nUnicodeLen += 1;
	*ppUnicodeDst = new WCHAR[nUnicodeLen];

	//转为Unicode
	MultiByteToWideChar(CP_UTF8,
		0,
		pUTF8Src,
		-1,
		*ppUnicodeDst,
		nUnicodeLen);
}






