void Runcmd() 
{
	CString strInputCmd;
	GetDlgItemText(IDC_EDIT2,strInputCmd);  //获取编辑框中输入的命令行
	if (strInputCmd.IsEmpty())
	{
		AfxMessageBox(_T("Please input..."));
		return;
	}

	// TODO: Add extra validation here
	SECURITY_ATTRIBUTES sa;
	sa.nLength = sizeof(SECURITY_ATTRIBUTES);	
	sa.lpSecurityDescriptor = NULL;			//使用系统默认的安全描述符	
	sa.bInheritHandle = TRUE;				//创建的进程继承句柄

	HANDLE hRead,hWrite;
	if (!CreatePipe(&hRead,&hWrite,&sa,0))  //创建匿名管道
	{		
		MessageBox(_T("CreatePipe Failed!"),_T("提示"),MB_OK | MB_ICONWARNING);		
		return;
	}
	
	STARTUPINFO si;	
	PROCESS_INFORMATION pi;
	ZeroMemory(&si,sizeof(STARTUPINFO));
	si.cb = sizeof(STARTUPINFO);	
	GetStartupInfo(&si);	
	si.hStdError = hWrite;	
	si.hStdOutput = hWrite;	 //新创建进程的标准输出连在写管道一端
	si.wShowWindow = SW_HIDE;  //隐藏窗口	
	si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;

	char cmdline[256]; 
	CString strcmdline;
	strcmdline.Format(_T("cmd /C %s"),strInputCmd);	//用于CreateProcessW
	sprintf(cmdline,"%s",strcmdline);				//用于CreateProcessA
	if (!CreateProcess(NULL,strcmdline.GetBuffer(),NULL,NULL,TRUE,NULL,NULL,NULL,&si,&pi))  //创建子进程
	{
		MessageBox(_T("CreateProcess Failed!"),_T("提示"),MB_OK | MB_ICONWARNING);		
		return;
	}
	CloseHandle(hWrite);  //关闭管道句柄
	
	char buffer[4096] = {0};
	CString strOutput;
	DWORD bytesRead;
	while (true) 
	{
		if (ReadFile(hRead,buffer,4095,&bytesRead,NULL) == NULL)  //读取管道
			break;
		
		strOutput += buffer;
		SetDlgItemText(IDC_EDIT1,strOutput);  //显示输出信息到编辑框,并刷新窗口
		UpdateWindow();
		Sleep(100);
	}
	CloseHandle(hRead);
}