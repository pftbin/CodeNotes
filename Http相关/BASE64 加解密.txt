
//BASE64 加密(普通算法)
enum Base64Option 
{
	Base64Encoding = 0,
	Base64UrlEncoding = 1,

	KeepTrailingEquals = 0,
	OmitTrailingEquals = 2
};

std::string encode_base64(const  std::string sourceData, int options = Base64Encoding)
{
	const char alphabet_base64[] = "ABCDEFGH" "IJKLMNOP" "QRSTUVWX" "YZabcdef" "ghijklmn" "opqrstuv" "wxyz0123" "456789+/";
	const char alphabet_base64url[] = "ABCDEFGH" "IJKLMNOP" "QRSTUVWX" "YZabcdef" "ghijklmn" "opqrstuv" "wxyz0123" "456789-_";
	const char *const alphabet = options & Base64UrlEncoding ? alphabet_base64url : alphabet_base64;
	const char padchar = '=';
	int padlen = 0;

	std::string tmp;
	tmp.resize((sourceData.size() + 2) / 3 * 4);

	int i = 0;
	char *out = &tmp[0];
	while (i < sourceData.size()) {
		// encode 3 bytes at a time
		int chunk = 0;
		chunk |= int(u_char(sourceData.data()[i++])) << 16;
		if (i == sourceData.size()) {
			padlen = 2;
		} else {
			chunk |= int(u_char(sourceData.data()[i++])) << 8;
			if (i == sourceData.size())
				padlen = 1;
			else
				chunk |= int(u_char(sourceData.data()[i++]));
		}

		int j = (chunk & 0x00fc0000) >> 18;
		int k = (chunk & 0x0003f000) >> 12;
		int l = (chunk & 0x00000fc0) >> 6;
		int m = (chunk & 0x0000003f);
		*out++ = alphabet[j];
		*out++ = alphabet[k];

		if (padlen > 1) {
			if ((options & OmitTrailingEquals) == 0)
				*out++ = padchar;
		} else {
			*out++ = alphabet[l];
		}
		if (padlen > 0) {
			if ((options & OmitTrailingEquals) == 0)
				*out++ = padchar;
		} else {
			*out++ = alphabet[m];
		}
	}
	assert((options & OmitTrailingEquals) || (out == tmp.size() + tmp.data()));
	if (options & OmitTrailingEquals)
		tmp.resize(out - tmp.data());
	return tmp;
}

//BASE64 解密(普通算法)
std::string decode_base64(const  std::string sourceData, int options = Base64Encoding)
{
	unsigned int buf = 0;
	int nbits = 0;
	std::string tmp;
	tmp.resize((sourceData.size() * 3) / 4);

	int offset = 0;
	for (int i = 0; i < sourceData.size(); ++i) {
		int ch = sourceData.at(i);
		int d;

		if (ch >= 'A' && ch <= 'Z')
			d = ch - 'A';
		else if (ch >= 'a' && ch <= 'z')
			d = ch - 'a' + 26;
		else if (ch >= '0' && ch <= '9')
			d = ch - '0' + 52;
		else if (ch == '+' && (options & Base64UrlEncoding) == 0)
			d = 62;
		else if (ch == '-' && (options & Base64UrlEncoding) != 0)
			d = 62;
		else if (ch == '/' && (options & Base64UrlEncoding) == 0)
			d = 63;
		else if (ch == '_' && (options & Base64UrlEncoding) != 0)
			d = 63;
		else
			d = -1;

		if (d != -1) {
			buf = (buf << 6) | d;
			nbits += 6;
			if (nbits >= 8) {
				nbits -= 8;
				tmp[offset++] = buf >> nbits;
				buf &= (1 << nbits) - 1;
			}
		}
	}

	tmp.resize(offset);
	return tmp;
}

//BASE64 加密(Script 按16进制字符加密)
std::string base64_encodebyhex(unsigned char const* hex_str_to_encode , unsigned int len)
{
	static const std::string base64_chars = 
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		"abcdefghijklmnopqrstuvwxyz"
		"0123456789+/";

	std::string ret;
	unsigned char char_array_3[3];
	unsigned char char_array_4[4];
	unsigned char* hval = new unsigned char[len/2];
	bool token = true;
	unsigned char temp = '0';
	//transform the string into a HEX char*
	for(int i = 0; i < len ; i++)
	{
		switch (hex_str_to_encode[i])
		{
		case 'a':
		case 'A': temp = 10; break;
		case 'b':
		case 'B': temp = 11; break;
		case 'c':
		case 'C': temp = 12; break;
		case 'd':
		case 'D': temp = 13; break;
		case 'e':
		case 'E': temp = 14; break;
		case 'f':
		case 'F': temp = 15; break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': temp = hex_str_to_encode[i] - '0'; break;
		default: return 0;
		}
		if(token)
		{
			token = false;
			hval[i/2] = temp * 16;
		} 
		else 
		{
			token = true;
			hval[i/2] += temp;
		}
	}
	int in_len = len/2;
	int i = 0, j = 0;
	while(in_len--)
	{
		char_array_3[i++] = *(hval++);
		if (i == 3)
		{
			char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
			char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
			char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
			char_array_4[3] = char_array_3[2] & 0x3f;

			for(i = 0; (i <4) ; i++)
				ret += base64_chars[char_array_4[i]];
			i = 0;
		}
	}
	if(i){
		for(j = i; j < 3; j++)
			char_array_3[j] = '\0';
		char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
		char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
		char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
		char_array_4[3] = char_array_3[2] & 0x3f;

		for (j = 0; (j < i + 1); j++)
			ret += base64_chars[char_array_4[j]];

		while((i++ < 3))
			ret += '=';

	}
	return ret;
}

//URL地址加密（字符转换）
std::string encodeURIComponent(std::string inString)
{
	std::stringstream ssUri;
	for( int i = 0; i < inString.length(); i++)
	{ 
		char c = inString[i];
		//0-9A-Za-z-_.!~*'()
		if ((c >= 'a' && c <= 'z') 
			|| (c >= 'A' && c <= 'Z') 
			|| (c >= '0' && c <= '9')
			|| c == '!' 
			|| (c >= '\'' && c <= '*') 
			|| c == '-' 
			|| c == '.' 
			|| c== '_' 
			|| c== '~')
		{
			ssUri << c;
		}
		else
		{
			ssUri << "%";
			if ((c & 0xf0) == 0)
				ssUri << 0;
			ssUri << setiosflags(ios::uppercase) << hex << (c & 0xff);
		}
	}
	return ssUri.str();
}

//实例
BOOL HMAC_HASH256_BASE64(CString strInitKey, CString strText, CString& strResult)
{
	std::string key = (CT2A)strInitKey;
	std::string msg = (CT2A)strText;


#if 1

	//HMAC_HASH256
	unsigned char hash[32];unsigned int len = 32;
	HMAC_CTX hctx;
	HMAC_CTX_init(&hctx);
	HMAC_Init_ex(&hctx, &key[0], key.length(), EVP_sha256(), NULL);
	HMAC_Update(&hctx, (const unsigned char*) &msg[0], msg.length());
	HMAC_Final(&hctx, hash, &len);
	HMAC_CTX_cleanup(&hctx);

#else 

	//HMAC_HASH256 - new
	unsigned char hash[32];unsigned int len = 32;
	HMAC_CTX *hctx = HMAC_CTX_new();
	HMAC_CTX_reset(hctx);
	HMAC_Init_ex(hctx, &key[0], key.length(), EVP_sha256(), NULL);
	HMAC_Update(hctx, (unsigned char*) &msg[0], msg.length());
	HMAC_Final(hctx, hash, &len);
	HMAC_CTX_free(hctx);

#endif

	stringstream ss;
	for (int i = 0; i < len; i++)
	{   
		ss << hex << std::setw(2) << std::setfill('0')  <<  ( unsigned int )hash[i];
	}

	//BASE64
	std::string source = ss.str();
	//std::string result = encode_base64(source);
	std::string result = base64_encodebyhex((const unsigned char*)source.c_str(),source.length());
	strResult = result.c_str();

	//URL地址加密
	std::string result_url = encodeURIComponent(result);
	strResult = result_url.c_str();

	return TRUE;
}